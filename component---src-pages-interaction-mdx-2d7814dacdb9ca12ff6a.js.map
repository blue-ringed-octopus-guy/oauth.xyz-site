{"version":3,"sources":["webpack:///./src/pages/interaction.mdx","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer.js","webpack:///./src/components/seo.js","webpack:///./src/components/header.js","webpack:///./src/components/layout.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/network.js","webpack:///./src/components/code.js"],"names":["layoutProps","MDXContent","props","_this","_React$Component","call","this","layout","DefaultLayout","render","_this$props","components","_babel_runtime_helpers_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_1___default","react__WEBPACK_IMPORTED_MODULE_3___default","a","createElement","_mdx_js_tag__WEBPACK_IMPORTED_MODULE_4__","name","Layout","Object","assign","_components_seo__WEBPACK_IMPORTED_MODULE_7__","title","keywords","parentName","_components_code__WEBPACK_IMPORTED_MODULE_6__","from","to","code","interact","type","callback","nonce","interaction_url","server_nonce","handle","value","language","codeString","interact_handle","user_code_url","user_code","wait","method","src","alt","React","Component","_frontmatter","__webpack_require__","d","__webpack_exports__","StaticQuery","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","prop_types__WEBPACK_IMPORTED_MODULE_1__","prop_types__WEBPACK_IMPORTED_MODULE_1___default","gatsby_link__WEBPACK_IMPORTED_MODULE_2__","gatsby_link__WEBPACK_IMPORTED_MODULE_2___default","StaticQueryContext","createContext","Consumer","staticQueryData","data","query","children","propTypes","PropTypes","object","string","isRequired","func","m","module","exports","require","default","SEO","_ref","description","lang","meta","react__WEBPACK_IMPORTED_MODULE_1___default","gatsby__WEBPACK_IMPORTED_MODULE_4__","detailsQuery","metaDescription","site","siteMetadata","react_helmet__WEBPACK_IMPORTED_MODULE_3___default","htmlAttributes","titleTemplate","content","property","author","concat","length","join","_public_static_d_1025518380_json__WEBPACK_IMPORTED_MODULE_0__","defaultProps","array","arrayOf","menuLinks","link","Header","siteTitle","currentPage","react_default","className","style","margin","gatsby_browser_entry","color","textDecoration","map","class","Fragment","header","maxWidth","padding","paddingTop","_755544856","node","ProdPageRenderer","location","pageResources","loader","getResourcesForPathnameSync","pathname","InternalPageRenderer","_babel_runtime_helpers_objectSpread__WEBPACK_IMPORTED_MODULE_0___default","json","shape","Client","Badge_default","pill","variant","Browser","AS","RS","toBadge","network_Client","network_Browser","network_AS","network_RS","Network","elements","Alert_default","Code","JSON","stringify","network","prism","okaidia","customStyle","marginTop","borderRadius"],"mappings":"iRAOMA,EAAc,GACCC,cACnB,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OACjBA,EAAAC,EAAAC,KAAAC,KAAMJ,IAANI,MACKC,OAASC,IAFGL,8BAKnBM,OAAA,WAAS,IAAAC,EAIHJ,KAAKJ,MAFPS,EAFKD,EAELC,WACGT,EAHEU,IAAAF,EAAA,gBAKP,OAAOG,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,UAAUC,OAAQZ,KAAKC,OAAQP,YAAamB,OAAOC,OAAO,GAAIpB,EAAaE,GAAQS,WAAYA,GAGjHE,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAKC,MAAM,cAAcC,SAAU,CAAC,QAAS,gBAAiB,cAC9DV,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,KAAKN,WAAYA,GAA9B,eACAE,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,IAAIN,WAAYA,GAA7B,yWACAE,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,IAAIN,WAAYA,GAA7B,qDACAE,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,KAAKN,WAAYA,GAC5BE,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,KAAKN,WAAYA,EAAYa,WAAW,MAArD,OAAkEX,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,aAAaN,WAAYA,EAAYa,WAAW,MAA7D,YAAlE,0HACAX,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,KAAKN,WAAYA,EAAYa,WAAW,MAArD,OAAkEX,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,aAAaN,WAAYA,EAAYa,WAAW,MAA7D,UAAlE,gJAEFX,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,IAAIN,WAAYA,GAA7B,yJACAE,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,KAAKN,WAAYA,GAC5BE,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,KAAKN,WAAYA,EAAYa,WAAW,MAArD,wBAAmFX,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,aAAaN,WAAYA,EAAYa,WAAW,MAA7D,YAAnF,oEACAX,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,KAAKN,WAAYA,EAAYa,WAAW,MAArD,0DAEFX,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,IAAIN,WAAYA,GAA7B,sQACAE,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,KAAKN,WAAYA,GAA9B,0BACAE,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,IAAIN,WAAYA,GAA7B,oKACAE,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,IAAIN,WAAYA,GAA7B,kKACAE,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAAMC,KAAK,SAASC,GAAG,KAAKC,KAAM,CAChCC,SAAY,CACVC,KAAQ,WACRC,SAAY,qBACZC,MAAS,2BAGbnB,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,IAAIN,WAAYA,GAA7B,4EAAsHE,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,aAAaN,WAAYA,EAAYa,WAAW,KAA7D,SAAtH,YAAsNX,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,aAAaN,WAAYA,EAAYa,WAAW,KAA7D,QAAtN,wGAAiZX,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,aAAaN,WAAYA,EAAYa,WAAW,KAA7D,SAAjZ,2EAAgjBX,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,aAAaN,WAAYA,EAAYa,WAAW,KAA7D,SAAhjB,8EAAktBX,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,aAAaN,WAAYA,EAAYa,WAAW,KAA7D,SAAltB,qOAA2gCX,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,aAAaN,WAAYA,EAAYa,WAAW,KAA7D,SAA3gC,4DACAX,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,IAAIN,WAAYA,GAA7B,2RACAE,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAAMC,KAAK,KAAKC,GAAG,SAASC,KAAM,CAChCK,gBAAiB,2DACjBC,aAAc,uBACdC,OAAQ,CACNC,MAAO,uBACPN,KAAM,aAGVjB,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,IAAIN,WAAYA,GAA7B,oHAA8JE,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,aAAaN,WAAYA,EAAYa,WAAW,KAA7D,SAA9J,YAA8PX,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,aAAaN,WAAYA,EAAYa,WAAW,KAA7D,QAA9P,oGACAX,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,IAAIN,WAAYA,GAA7B,mOACAE,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAAMC,KAAK,SAASC,GAAG,UAAUU,SAAS,OAAOC,WAAU,uFAE3DzB,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,IAAIN,WAAYA,GAA7B,oHACAE,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAAMC,KAAK,SAASC,GAAG,UAAUU,SAAS,OAAOC,WAAU,2KAI3DzB,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,IAAIN,WAAYA,GAA7B,kOACAE,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,IAAIN,WAAYA,GAA7B,6PACAE,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,IAAIN,WAAYA,GAA7B,uRAAiUE,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,aAAaN,WAAYA,EAAYa,WAAW,KAA7D,QAAjU,yGAA6fX,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,aAAaN,WAAYA,EAAYa,WAAW,KAA7D,MAA7f,+CACAX,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,KAAKN,WAAYA,GAC5BE,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,KAAKN,WAAYA,EAAYa,WAAW,MAArD,OAAkEX,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,aAAaN,WAAYA,EAAYa,WAAW,MAA7D,SAAlE,gEACAX,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,KAAKN,WAAYA,EAAYa,WAAW,MAArD,OAAkEX,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,aAAaN,WAAYA,EAAYa,WAAW,MAA7D,gBAAlE,uDACAX,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,KAAKN,WAAYA,EAAYa,WAAW,MAArD,kCAEFX,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,IAAIN,WAAYA,GAA7B,yDAAmGE,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,aAAaN,WAAYA,EAAYa,WAAW,KAA7D,YAAnG,4EACAX,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,KAAKN,WAAYA,GAC5BE,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,KAAKN,WAAYA,EAAYa,WAAW,MAArD,0BAAqFX,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,aAAaN,WAAYA,EAAYa,WAAW,MAA7D,QAArF,2BACAX,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,KAAKN,WAAYA,EAAYa,WAAW,MAArD,gDAA2GX,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,aAAaN,WAAYA,EAAYa,WAAW,MAA7D,0BAE7GX,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAAMC,KAAK,KAAKC,GAAG,UAAUU,SAAS,OAAOC,WAAU,oLAIvDzB,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,IAAIN,WAAYA,GAA7B,+OACAE,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,aAAaN,WAAYA,GACpCE,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,IAAIN,WAAYA,EAAYa,WAAW,cAApD,mQAEFX,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,IAAIN,WAAYA,GAA7B,8KACAE,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,IAAIN,WAAYA,GAA7B,sJACAE,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,KAAKN,WAAYA,GAC5BE,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,KAAKN,WAAYA,EAAYa,WAAW,MAArD,+MACAX,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,KAAKN,WAAYA,EAAYa,WAAW,MAArD,mQAEFX,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,IAAIN,WAAYA,GAA7B,+VAAyYE,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,aAAaN,WAAYA,EAAYa,WAAW,KAA7D,QAAzY,kFAA8iBX,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,aAAaN,WAAYA,EAAYa,WAAW,KAA7D,SAA9iB,iCAAmqBX,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,aAAaN,WAAYA,EAAYa,WAAW,KAA7D,gBAAnqB,sEAAo0BX,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,aAAaN,WAAYA,EAAYa,WAAW,KAA7D,YAAp0B,+GACAX,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,IAAIN,WAAYA,GAA7B,sRACAE,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAAMC,KAAK,SAASC,GAAG,KAAKC,KAAM,CAChCO,OAAQ,uBACRI,gBAAiB,4FAEnB1B,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,IAAIN,WAAYA,GAA7B,sUACAE,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,KAAKN,WAAYA,GAA9B,uBACAE,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,IAAIN,WAAYA,GAA7B,6bACAE,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,IAAIN,WAAYA,GAA7B,gJACAE,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAAMC,KAAK,SAASC,GAAG,KAAKC,KAAM,CAChCC,SAAY,CACVC,KAAQ,aAGZjB,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,IAAIN,WAAYA,GAA7B,2fAAqiBE,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,aAAaN,WAAYA,EAAYa,WAAW,KAA7D,KAAriB,eAAooBX,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,aAAaN,WAAYA,EAAYa,WAAW,KAA7D,KAApoB,uCACAX,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAAMC,KAAK,KAAKC,GAAG,SAASC,KAAM,CAChCY,cAAe,6CACfC,UAAW,YACXN,OAAQ,CACNC,MAAO,uBACPN,KAAM,aAGVjB,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,IAAIN,WAAYA,GAA7B,2NACAE,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,IAAIN,WAAYA,GAA7B,ybACAE,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,IAAIN,WAAYA,GAA7B,oKACAE,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,aAAaN,WAAYA,GACpCE,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,IAAIN,WAAYA,EAAYa,WAAW,cAApD,iYAEFX,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,IAAIN,WAAYA,GAA7B,yNACAE,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAAMC,KAAK,SAASC,GAAG,KAAKC,KAAM,CAChCO,OAAQ,0BAEVtB,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,IAAIN,WAAYA,GAA7B,sMACAE,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAAMC,KAAK,KAAKC,GAAG,SAASC,KAAM,CAChCc,KAAM,GACNP,OAAQ,CACNC,MAAO,uBACPO,OAAQ,aAGZ9B,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,IAAIN,WAAYA,GAA7B,OAAiDE,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,aAAaN,WAAYA,EAAYa,WAAW,KAA7D,QAAjD,+PACAX,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,KAAKN,WAAYA,GAA9B,yBACAE,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,IAAIN,WAAYA,GAA7B,qRACAE,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAAMC,KAAK,SAASC,GAAG,KAAKC,KAAM,CAChCC,SAAY,CACVC,KAAQ,eAGZjB,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,IAAIN,WAAYA,GAA7B,qSACAE,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAAMC,KAAK,KAAKC,GAAG,SAASC,KAAM,CAChCK,gBAAiB,2DACjBE,OAAQ,CACNC,MAAO,uBACPN,KAAM,aAGVjB,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,IAAIN,WAAYA,GAA7B,0FACAE,EAAAC,EAAAC,cAAA,OAAK6B,IAAI,qLAA6MC,IAAI,YAC1NhC,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,IAAIN,WAAYA,GAA7B,kHACAE,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAAMC,KAAK,SAASC,GAAG,KAAKC,KAAM,CAChCO,OAAQ,0BAEVtB,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,IAAIN,WAAYA,GAA7B,sMACAE,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAAMC,KAAK,KAAKC,GAAG,SAASC,KAAM,CAChCc,KAAM,GACNP,OAAQ,CACNC,MAAO,uBACPO,OAAQ,aAGZ9B,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,aAAaN,WAAYA,GACpCE,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,IAAIN,WAAYA,EAAYa,WAAW,cAApD,mSA7JgCsB,IAAMC,WAmKjCC,EAAe,qCC3K5BC,EAAAC,EAAAC,EAAA,sBAAAC,IAAA,IAAAC,EAAAJ,EAAA,GAAAK,EAAAL,EAAAM,EAAAF,GAAAG,EAAAP,EAAA,GAAAQ,EAAAR,EAAAM,EAAAC,GAAAE,EAAAT,EAAA,IAAAU,EAAAV,EAAAM,EAAAG,GAAAT,EAAAC,EAAAC,EAAA,sBAAAQ,EAAA7C,IAAAmC,EAAA,SAYMW,EAAqBd,IAAMe,cAAc,IAEzCT,EAAc,SAAAlD,GAAK,OACvBoD,EAAAxC,EAAAC,cAAC6C,EAAmBE,SAApB,KACG,SAAAC,GACC,OACE7D,EAAM8D,MACLD,EAAgB7D,EAAM+D,QAAUF,EAAgB7D,EAAM+D,OAAOD,MAEtD9D,EAAMO,QAAUP,EAAMgE,UAC5BhE,EAAM8D,KAAO9D,EAAM8D,KAAKA,KAAOD,EAAgB7D,EAAM+D,OAAOD,MAGvDV,EAAAxC,EAAAC,cAAA,uCA4BfqC,EAAYe,UAAY,CACtBH,KAAMI,IAAUC,OAChBJ,MAAOG,IAAUE,OAAOC,WACxB9D,OAAQ2D,IAAUI,KAClBN,SAAUE,IAAUI,2BCzDtB,IAAsBC,EAKpBC,EAAOC,SALaF,EAKWG,EAAQ,OALRH,EAAEI,SAAYJ,4GCK/C,SAASK,EAATC,GAA2D,IAA5CC,EAA4CD,EAA5CC,YAAaC,EAA+BF,EAA/BE,KAAMC,EAAyBH,EAAzBG,KAAM3D,EAAmBwD,EAAnBxD,SAAUD,EAASyD,EAATzD,MAChD,OACE6D,EAAArE,EAAAC,cAACqE,EAAA,EAAD,CACEnB,MAAOoB,EACP5E,OAAQ,SAAAuD,GACN,IAAMsB,EACJN,GAAehB,EAAKuB,KAAKC,aAAaR,YACxC,OACEG,EAAArE,EAAAC,cAAC0E,EAAA3E,EAAD,CACE4E,eAAgB,CACdT,QAEF3D,MAAOA,EACPqE,cAAa,QAAU3B,EAAKuB,KAAKC,aAAalE,MAC9C4D,KAAM,CACJ,CACEjE,KAAM,cACN2E,QAASN,GAEX,CACEO,SAAU,WACVD,QAAStE,GAEX,CACEuE,SAAU,iBACVD,QAASN,GAEX,CACEO,SAAU,UACVD,QAAS,WAEX,CACE3E,KAAM,eACN2E,QAAS,WAEX,CACE3E,KAAM,kBACN2E,QAAS5B,EAAKuB,KAAKC,aAAaM,QAElC,CACE7E,KAAM,gBACN2E,QAAStE,GAEX,CACEL,KAAM,sBACN2E,QAASN,IAGVS,OACCxE,EAASyE,OAAS,EACd,CACE/E,KAAM,WACN2E,QAASrE,EAAS0E,KAAK,OAEzB,IAELF,OAAOb,MAtDlBlB,KAAAkC,IA8DJpB,EAAIqB,aAAe,CACjBlB,KAAM,KACNC,KAAM,GACN3D,SAAU,IAGZuD,EAAIX,UAAY,CACda,YAAaZ,IAAUE,OACvBW,KAAMb,IAAUE,OAChBY,KAAMd,IAAUgC,MAChB7E,SAAU6C,IAAUiC,QAAQjC,IAAUE,QACtChD,MAAO8C,IAAUE,OAAOC,YAGXO,MAEf,IAAMO,EAAY,qGChFZiB,uBAAY,CACZ,CACErF,KAAM,UACNsF,KAAM,wBAER,CACEtF,KAAM,WACNsF,KAAM,yBAER,CACEtF,KAAM,cACNsF,KAAM,iBAER,CACEtF,KAAM,OACNsF,KAAM,UAER,CACEtF,KAAM,SACNsF,KAAM,YAER,CACEtF,KAAM,WACNsF,KAAM,cAER,CACEtF,KAAM,QACNsF,KAAM,aAIRC,EAAS,SAAAzB,GAAA,IAAG0B,EAAH1B,EAAG0B,UAAH1B,EAAc2B,YAAd,OACbC,EAAA7F,EAAAC,cAAA,OAAK6F,UAAU,UACbD,EAAA7F,EAAAC,cAAA,OAAK6F,UAAU,WACbD,EAAA7F,EAAAC,cAAA,MAAI8F,MAAO,CAAEC,OAAQ,IACnBH,EAAA7F,EAAAC,cAACgG,EAAA,EAAD,CACEpF,GAAG,IACHkF,MAAO,CACLG,MAAO,QACPC,eAAgB,SAGjBR,IAGDE,EAAA7F,EAAAC,cAAA,WAEIuF,EAAUY,IAAI,SAAAX,GAAI,OACdI,EAAA7F,EAAAC,cAACgG,EAAA,EAAD,CAAMpF,GAAI4E,EAAKA,MAAOA,EAAKtF,UAKzC0F,EAAA7F,EAAAC,cAAA,OAAKoG,MAAM,aAMfX,EAAOrC,UAAY,CACjBsC,UAAWrC,IAAUE,QAGvBkC,EAAOL,aAAe,CACpBM,UAAW,IAGED,QChETtF,iBAAS,SAAA6D,GAAA,IAAGb,EAAHa,EAAGb,SAAH,OACbyC,EAAA7F,EAAAC,cAACgG,EAAA,EAAD,CACE9C,MAAK,YASLxD,OAAQ,SAAAuD,GAAI,OACV2C,EAAA7F,EAAAC,cAAA4F,EAAA7F,EAAAsG,SAAA,KACET,EAAA7F,EAAAC,cAACsG,EAAD,CAAQZ,UAAWzC,EAAKuB,KAAKC,aAAalE,QAC1CqF,EAAA7F,EAAAC,cAAA,OACE8F,MAAO,CACLC,OAAQ,SACRQ,SAAU,IACVC,QAAS,wBACTC,WAAY,IAGbtD,KArBTF,KAAAyD,MA4BFvG,EAAOiD,UAAY,CACjBD,SAAUE,IAAUsD,KAAKnD,YAGZrD,+LCnCTyG,EAAmB,SAAA5C,GAAkB,IAAf6C,EAAe7C,EAAf6C,SACpBC,EAAgBC,UAAOC,4BAA4BH,EAASI,UAClE,OAAKH,EAIE/E,IAAM/B,cAAckH,IAApBC,IAAA,CACLN,WACAC,iBACGA,EAAcM,OANV,MAUXR,EAAiBxD,UAAY,CAC3ByD,SAAUxD,IAAUgE,MAAM,CACxBJ,SAAU5D,IAAUE,OAAOC,aAC1BA,YAGUoD,mTCpBTU,EAAS,WACb,OACE1B,EAAA7F,EAAAC,cAACuH,EAAAxH,EAAD,CAAOyH,MAAI,EAACC,QAAQ,QAApB,WAIEC,EAAU,WACd,OACE9B,EAAA7F,EAAAC,cAACuH,EAAAxH,EAAD,CAAOyH,MAAI,EAACC,QAAQ,aAApB,YAIEE,EAAK,WACT,OACE/B,EAAA7F,EAAAC,cAACuH,EAAAxH,EAAD,CAAOyH,MAAI,EAACC,QAAQ,WAApB,OAIEG,EAAK,WACT,OACEhC,EAAA7F,EAAAC,cAACuH,EAAAxH,EAAD,CAAOyH,MAAI,EAACC,QAAQ,QAApB,OAIEI,EAAU,SAAClH,GACf,MAAY,UAARA,EACMiF,EAAA7F,EAAAC,cAAC8H,EAAD,MACS,WAARnH,EACDiF,EAAA7F,EAAAC,cAAC+H,EAAD,MACS,MAARpH,EACDiF,EAAA7F,EAAAC,cAACgI,EAAD,MACS,MAARrH,EACDiF,EAAA7F,EAAAC,cAACiI,EAAD,MAEArC,EAAA7F,EAAAC,cAACuH,EAAAxH,EAAD,CAAOyH,MAAI,EAACC,QAAQ,UAApB,MAoBGS,EAhBC,SAAAlE,GAAgB,IAAdrD,EAAcqD,EAAdrD,KAAMC,EAAQoD,EAARpD,GAChBuH,EAAW,CACfN,EAAQlH,GACR,IACAkH,EAAQjH,IAGV,OAEEgF,EAAA7F,EAAAC,cAACoI,EAAArI,EAAD,CAAO0H,QAAQ,OAAO5B,UAAU,iBAC7BsC,ICpBQE,IA1BF,SAAArE,GAA4C,IAA1CnD,EAA0CmD,EAA1CnD,KAAMU,EAAoCyC,EAApCzC,WAAYZ,EAAwBqD,EAAxBrD,KAAMC,EAAkBoD,EAAlBpD,GAAIU,EAAc0C,EAAd1C,SAUzC,OARKA,IACHA,EAAW,cAGRC,IACHA,EAAa+G,KAAKC,UAAU1H,EAAM,KAAM,IAGtCF,GAAQC,EACF,CACNgF,EAAA7F,EAAAC,cAAA4F,EAAA7F,EAAAsG,SAAA,KACAT,EAAA7F,EAAAC,cAACwI,EAAD,CAAS7H,KAAMA,EAAMC,GAAIA,IACzBgF,EAAA7F,EAAAC,cAACyI,EAAA,EAAD,CAAmBnH,SAAUA,EAAUwE,MAAO4C,IAASC,YAAa,CAACC,UAAW,EAAGC,aAAc,sBAAuBtH,KAKxHqE,EAAA7F,EAAAC,cAACyI,EAAA,EAAD,CAAmBnH,SAAUA,EAAUwE,MAAO4C,KAAUnH","file":"component---src-pages-interaction-mdx-2d7814dacdb9ca12ff6a.js","sourcesContent":["import React from 'react'\nimport { MDXTag } from '@mdx-js/tag'\n\n\nimport DefaultLayout from \"/Users/jricher/Projects/oauth.xyz-site/src/components/layout.js\";\nimport Code from \"../components/code\";\nimport SEO from '../components/seo';\nconst layoutProps = {};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.layout = DefaultLayout;\n  }\n\n  render() {\n    const {\n      components,\n      ...props\n    } = this.props;\n    return <MDXTag name=\"wrapper\" Layout={this.layout} layoutProps={Object.assign({}, layoutProps, props)} components={components}>\n\n\n      <SEO title=\"Interaction\" keywords={['oauth', 'authorization', 'security']} />\n      <MDXTag name=\"h1\" components={components}>{`Interaction`}</MDXTag>\n      <MDXTag name=\"p\" components={components}>{`During a transaction, the AS will often require interaction from a user. This user can be the same person running the client software, or it could be another party who's not necessarily available. In the transaction request, the client tells the AS how it is able to interact with the user, including information on how to get back to the server when done. `}</MDXTag>\n      <MDXTag name=\"p\" components={components}>{`Currently, two modes of interaction are defined: `}</MDXTag>\n      <MDXTag name=\"ul\" components={components}>\n        <MDXTag name=\"li\" components={components} parentName=\"ul\">{`The `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`redirect`}</MDXTag>{` mode is used when the client is capable of opening a browser on the same device for the user to interact with the AS.`}</MDXTag>\n        <MDXTag name=\"li\" components={components} parentName=\"ul\">{`The `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`device`}</MDXTag>{` mode is used when the client cannot open a browser for the user but can communicate an out-of-band code for the user to provide to the AS.`}</MDXTag>\n      </MDXTag>\n      <MDXTag name=\"p\" components={components}>{`In addition, the client can indicate how it can receive responses from the interaction request. Currently, there are two modes of getting a response:`}</MDXTag>\n      <MDXTag name=\"ul\" components={components}>\n        <MDXTag name=\"li\" components={components} parentName=\"ul\">{`The client can set a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`callback`}</MDXTag>{` URL that the AS can send the user back to when done interacting`}</MDXTag>\n        <MDXTag name=\"li\" components={components} parentName=\"ul\">{`The client can poll the AS using a transaction handle`}</MDXTag>\n      </MDXTag>\n      <MDXTag name=\"p\" components={components}>{`These can be used independently of the interaction method, but it will likely be most common to use a callback with the redirect method, polling with the device method, and in limited cases polling with the redirect method. These combinations are shown here.`}</MDXTag>\n      <MDXTag name=\"h2\" components={components}>{`Redirect with Callback`}</MDXTag>\n      <MDXTag name=\"p\" components={components}>{`In redirect based interaction, the client sends the user to an interactive page at the AS. The AS then sends the user back to the client with an HTTP redirect. `}</MDXTag>\n      <MDXTag name=\"p\" components={components}>{`To use this mode, the client's transaction request includes a section that includes a URI the client can receive requests at as well as a unique state value. `}</MDXTag>\n      <Code from=\"client\" to=\"as\" code={{\n        \"interact\": {\n          \"type\": \"redirect\",\n          \"callback\": \"https://client.foo\",\n          \"nonce\": \"VJLO6A4CAYLBXHTR0KRO\"\n        }\n      }} />\n      <MDXTag name=\"p\" components={components}>{`The URI must be reachable from the user's system browser, and can be any `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`https`}</MDXTag>{` URL, an `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`http`}</MDXTag>{` URL for a local-to-the-device host, or a service-specific URI that the user's browser can open. The `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`nonce`}</MDXTag>{` must be a unique value for each transaction and cannot be re-used. The `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`nonce`}</MDXTag>{` value is opaque to the AS and should be random. The client remembers this `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`nonce`}</MDXTag>{` value and associates it with the current user. For a web server or other web application, this is generally done by placing it in the user's session. Native applications are generally considered single-user in nature, so the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`nonce`}</MDXTag>{` value is remembered in the application's current state.`}</MDXTag>\n      <MDXTag name=\"p\" components={components}>{`When the AS determines that the client's request needs user interaction, it creates a unique interaction URL and returns it to the client in the transaction response. The AS associates this unique URI with the transaction. The interaction URI is for a user-facing page at the AS.`}</MDXTag>\n      <Code from=\"as\" to=\"client\" code={{\n        interaction_url: \"https://server.example.com/interact/4CF492MLVMSW9MKMXKHQ\",\n        server_nonce: \"MBDOFXG4Y5CVJCX821LH\",\n        handle: {\n          value: \"80UPRY5NM33OMUKMKSKU\",\n          type: \"bearer\"\n        }\n      }} />\n      <MDXTag name=\"p\" components={components}>{`Much like the callback URI, the interaction URI must be reachable from the user's system browser, and can be any `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`https`}</MDXTag>{` URL, an `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`http`}</MDXTag>{` URL for a local-to-the-device host, or a service-specific URI that the user's browser can open.`}</MDXTag>\n      <MDXTag name=\"p\" components={components}>{`The client sends the user to the URL completely as-is, without adding any query parameters, fragments, paths, or other components. If the client is a web server, it can send the user to the remote site via an HTTP redirect.`}</MDXTag>\n      <Code from=\"client\" to=\"browser\" language='http' codeString={`HTTP 302 Found\nLocation: https://server.example.com/interact/4CF492MLVMSW9MKMXKHQ`} />\n      <MDXTag name=\"p\" components={components}>{`If the client is a mobile application, such as an Android app, it can launch the system browser for interaction.`}</MDXTag>\n      <Code from=\"client\" to=\"browser\" language='java' codeString={`Intent browserIntent = \n  new Intent(Intent.ACTION_VIEW, \n    Uri.parse(\"https://server.example.com/interact/4CF492MLVMSW9MKMXKHQ\"));\nstartActivity(browserIntent);`} />\n      <MDXTag name=\"p\" components={components}>{`Obviously, any method including an embedded security tab such as used by the AppAuth implementation of OAuth 2 is also acceptable. The important thing is to get the current user to the AS, where they can start interacting.`}</MDXTag>\n      <MDXTag name=\"p\" components={components}>{`Once at the AS, the AS can ask the user for authentication, and to authorize the application itself. The AS could prompt the user to provide additional claims or proofs however it sees fit, and this interaction is ultimately outside of the protocol.`}</MDXTag>\n      <MDXTag name=\"p\" components={components}>{`When the AS has collected whatever input it needs from the user, it sends the user back to the client with an HTTP redirect. First, the AS creates a unique, unguessable interaction handle that the client can use in its subsequent interaction request. The AS also calculates a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`hash`}</MDXTag>{` to allow the client to confirm the transaction by concatentating the following values with a newline `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`\\n`}</MDXTag>{` character and computing the SHA3_512 hash:`}</MDXTag>\n      <MDXTag name=\"ul\" components={components}>\n        <MDXTag name=\"li\" components={components} parentName=\"ul\">{`the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`nonce`}</MDXTag>{` value sent by the client in the initial transaction request`}</MDXTag>\n        <MDXTag name=\"li\" components={components} parentName=\"ul\">{`the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`server_nonce`}</MDXTag>{` value returned in the initial transaction response`}</MDXTag>\n        <MDXTag name=\"li\" components={components} parentName=\"ul\">{`the unique interaction handle`}</MDXTag>\n      </MDXTag>\n      <MDXTag name=\"p\" components={components}>{`The AS creates the URL for the redirect by taking the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`callback`}</MDXTag>{` URI presented in the transaction request and appending two parameters: `}</MDXTag>\n      <MDXTag name=\"ul\" components={components}>\n        <MDXTag name=\"li\" components={components} parentName=\"ul\">{`the Base64 URL encoded `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`hash`}</MDXTag>{` value calculated above`}</MDXTag>\n        <MDXTag name=\"li\" components={components} parentName=\"ul\">{`a unique interaction handle, in this example `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`4IFWWIKYBC2PQ6U56NL1`}</MDXTag></MDXTag>\n      </MDXTag>\n      <Code from=\"as\" to=\"browser\" language='http' codeString={`HTTP 302 Found\nLocation: https://client.foo/\n  ?hash=p28jsq0Y2KK3WS__a42tavNC64ldGTBroywsWxT4md_jZQ1R2HZT8BOWYHcLmObM7XHPAdJzTZMtKBsaraJ64A\n  &interact=4IFWWIKYBC2PQ6U56NL1`} />\n      <MDXTag name=\"p\" components={components}>{`Note that the AS has to use a proper URL builder in case the client's callback URL contains existing query parameters, is lacking a root path, or has some other anomaly which would make it problematic to simply concatenate the strings.`}</MDXTag>\n      <MDXTag name=\"blockquote\" components={components}>\n        <MDXTag name=\"p\" components={components} parentName=\"blockquote\">{`This can't be a plain string concatenation because it would potentially let a malicious client inject a bad callback URI that looks safe. Alternatively we could use URI templates but that seems a lot of complexity to enforce with its own set of problems.`}</MDXTag>\n      </MDXTag>\n      <MDXTag name=\"p\" components={components}>{`Once the AS creates the redirect response to the interaction request, the AS deletes or otherwise deactivates the interaction URL to prevent phishing and replay attacks. `}</MDXTag>\n      <MDXTag name=\"p\" components={components}>{`If the AS determines that there is an error during the interaction, its response depends on whether or not the incoming interaction URL was valid.`}</MDXTag>\n      <MDXTag name=\"ul\" components={components}>\n        <MDXTag name=\"li\" components={components} parentName=\"ul\">{`If the URL was valid and bound to an active transaction, the AS can return to the client as in a successful transaction. The client needs to send data to the transaction endpoint to determine next steps.`}</MDXTag>\n        <MDXTag name=\"li\" components={components} parentName=\"ul\">{`If the URL was not valid or not bound to an active transaction, the AS can only display to the user an error. Since the client has no way to inject a redirect URI alongside an invalid interaction request, there is reduced risk of open redirection attack.`}</MDXTag>\n      </MDXTag>\n      <MDXTag name=\"p\" components={components}>{`The client receives a request from the user's browser through the callback URL. If the client is a web server, this comes in as any other request. If the client is a native application, it usually receives the full URL from the system in whatever function it has registered to receive incoming requests. In any event, the client needs to parse the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`hash`}</MDXTag>{` parameter and compare its value to a hash calculated by its originally chosen `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`nonce`}</MDXTag>{` value, the server's returned `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`server_nonce`}</MDXTag>{` value from the original transaction request, and the value of the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`interact`}</MDXTag>{` handle parameter from the callback request. If these hash values don't match the client returns an error. `}</MDXTag>\n      <MDXTag name=\"p\" components={components}>{`The client then sends a transaction continue request to the AS including the interaction handle as a parameter. The client also includes the current value of the transaction handle (here as a bearer key) as well as any proofs for keys presented during the transaction start.`}</MDXTag>\n      <Code from=\"client\" to=\"as\" code={{\n        handle: \"80UPRY5NM33OMUKMKSKU\",\n        interact_handle: \"CuD9MrpSXVKvvI6dN1awtNLx-HhZy46hJFDBicG4KoZaCmBofvqPxtm7CDMTsUFuvcmLwi_zUN70cCvalI6ENw\"\n      }} />\n      <MDXTag name=\"p\" components={components}>{`The AS looks up the transaction from the transaction handle and fetches the interaction handle associated with that transaction. The AS compares the presented handle to hash of the stored interaction handle it appended to the client's callback. If they match, the AS continues processing as normal, likely issuing a token.`}</MDXTag>\n      <MDXTag name=\"h2\" components={components}>{`Device with Polling`}</MDXTag>\n      <MDXTag name=\"p\" components={components}>{`The device-based interaction is intended for clients that need to have the user use a secondary device of some kind to interact with the authorization server. Unlike the redirect based interaction, the client does not send the user to the AS directly. Instead, the client presents the user with a code and instructs the user to interact with the server. Meanwhile, the client polls the AS in the background until the transaction is approved.`}</MDXTag>\n      <MDXTag name=\"p\" components={components}>{`The client starts this mode by sending a transaction request indicating that the user will interact with the AS through a secondary device. `}</MDXTag>\n      <Code from=\"client\" to=\"as\" code={{\n        \"interact\": {\n          \"type\": \"device\"\n        }\n      }} />\n      <MDXTag name=\"p\" components={components}>{`When the AS determines that the client's request needs user interaction, it sends an interaction URI in the transaction response. The interaction URI is for a user-facing page at the AS, and this can be a static URI for this mode. The AS also includes a short user-facing code. This code must be random, short-lived, and easily typed by a user. It must be processed in a case-insensitive way, and should use characters that are unambiguous when displayed even at low resolution (e.g., not using both the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`0`}</MDXTag>{` (zero) and `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`O`}</MDXTag>{` (letter O) characters as options).`}</MDXTag>\n      <Code from=\"as\" to=\"client\" code={{\n        user_code_url: \"https://server.example.com/interact/device\",\n        user_code: \"A1BC-3DFF\",\n        handle: {\n          value: \"80UPRY5NM33OMUKMKSKU\",\n          type: \"bearer\"\n        }\n      }} />\n      <MDXTag name=\"p\" components={components}>{`The client presents the user code to the user. The client also indicates to the user that they need to go to the interaction URL. As this is likely to be a static URL, the AS can provide a static link to this page. `}</MDXTag>\n      <MDXTag name=\"p\" components={components}>{`Once at the AS, the AS can ask the user for authentication, and to authorize the application itself. The AS could prompt the user to provide additional claims or proofs however it sees fit, and this interaction is ultimately outside of the protocol. At the interaction page, the user is prompted to enter the code from their device. The AS uses this code to look up the associated transaction to determine which actions it needs to take.`}</MDXTag>\n      <MDXTag name=\"p\" components={components}>{`When the AS has collected whatever additional input it needs from the user, it displays to the user that they can return to their device and continue operation.`}</MDXTag>\n      <MDXTag name=\"blockquote\" components={components}>\n        <MDXTag name=\"p\" components={components} parentName=\"blockquote\">{`To completely close a session-fixation attack, we could require the AS to present another code to the user and have the user enter that into the client device. This only works on some kinds of devices, though, so it would need to be an option. Additionally, we might want to consider a kind of \"secondary application\" based interaction that isn't web-based, such as a CIBA login.`}</MDXTag>\n      </MDXTag>\n      <MDXTag name=\"p\" components={components}>{`Meanwhile, the client can poll the AS using the transaction handle to see if the user has authorized them yet. This request includes proofs of any keys that the client sent during the original transaction request.`}</MDXTag>\n      <Code from=\"client\" to=\"as\" code={{\n        handle: \"80UPRY5NM33OMUKMKSKU\"\n      }} />\n      <MDXTag name=\"p\" components={components}>{`If the user has yet to approve the transaction, the AS sends back a response telling the client to wait. This response contains a new transaction handle which replaces the client's original one.`}</MDXTag>\n      <Code from=\"as\" to=\"client\" code={{\n        wait: 30,\n        handle: {\n          value: \"BI9QNW6V9W3XFJK4R02D\",\n          method: \"bearer\"\n        }\n      }} />\n      <MDXTag name=\"p\" components={components}>{`The `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`wait`}</MDXTag>{` parameter tells the client the number of integer seconds it must wait before polling again. The client can continue to poll in this manner until it receives either a token response or the user code times out and the client receives an error response.`}</MDXTag>\n      <MDXTag name=\"h2\" components={components}>{`Redirect with Polling`}</MDXTag>\n      <MDXTag name=\"p\" components={components}>{`For some kinds of clients, it is possible to show the user a visual signal such as a QR code that the user can scan on a secondary device. This allows the client to send the user to an arbitrary URL but not receive a callback in the front channel, so polling is necessary. `}</MDXTag>\n      <Code from=\"client\" to=\"as\" code={{\n        \"interact\": {\n          \"type\": \"redirect\"\n        }\n      }} />\n      <MDXTag name=\"p\" components={components}>{`As above, when the AS determines that the client's request needs user interaction, it creates a unique interaction URL and returns it to the client in the transaction response. The AS associates this unique URI with the transaction. The interaction URI is for a user-facing page at the AS.`}</MDXTag>\n      <Code from=\"as\" to=\"client\" code={{\n        interaction_url: \"https://server.example.com/interact/4CF492MLVMSW9MKMXKHQ\",\n        handle: {\n          value: \"80UPRY5NM33OMUKMKSKU\",\n          type: \"bearer\"\n        }\n      }} />\n      <MDXTag name=\"p\" components={components}>{`The client then communicates this arbitrary URL to the user, perhaps using a QR code. `}</MDXTag>\n      <img src=\"http://api.qrserver.com/v1/create-qr-code/?color=000000&amp;bgcolor=FFFFFF&amp;data=https%3A%2F%2Fserver.example.com%2Finteract%2F4CF492MLVMSW9MKMXKHQ&amp;qzone=1&amp;margin=0&amp;size=200x200&amp;ecc=L\" alt=\"qr code\" />\n      <MDXTag name=\"p\" components={components}>{`While the client waits for the user to complete the interaction, it polls the AS using the transaction handle.`}</MDXTag>\n      <Code from=\"client\" to=\"as\" code={{\n        handle: \"80UPRY5NM33OMUKMKSKU\"\n      }} />\n      <MDXTag name=\"p\" components={components}>{`If the user has yet to approve the transaction, the AS sends back a response telling the client to wait. This response contains a new transaction handle which replaces the client's original one.`}</MDXTag>\n      <Code from=\"as\" to=\"client\" code={{\n        wait: 30,\n        handle: {\n          value: \"ZI9QNW6V9W3XFJK4R02D\",\n          method: \"bearer\"\n        }\n      }} />\n      <MDXTag name=\"blockquote\" components={components}>\n        <MDXTag name=\"p\" components={components} parentName=\"blockquote\">{`It would be interesting to figure out if we can combine both the user code and arbitrary redirect URL methods, giving the user a few options. This should be as simple as allowing more flexibility on the interaction request portion and having the server return all possible options.`}</MDXTag>\n      </MDXTag>\n           </MDXTag>;\n  }\n\n}\nexport const _frontmatter = {};\n    ","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\n\nconst StaticQueryContext = React.createContext({})\n\nconst StaticQuery = props => (\n  <StaticQueryContext.Consumer>\n    {staticQueryData => {\n      if (\n        props.data ||\n        (staticQueryData[props.query] && staticQueryData[props.query].data)\n      ) {\n        return (props.render || props.children)(\n          props.data ? props.data.data : staticQueryData[props.query].data\n        )\n      } else {\n        return <div>Loading (StaticQuery)</div>\n      }\n    }}\n  </StaticQueryContext.Consumer>\n)\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n}\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Helmet from 'react-helmet'\nimport { StaticQuery, graphql } from 'gatsby'\n\nfunction SEO({ description, lang, meta, keywords, title }) {\n  return (\n    <StaticQuery\n      query={detailsQuery}\n      render={data => {\n        const metaDescription =\n          description || data.site.siteMetadata.description\n        return (\n          <Helmet\n            htmlAttributes={{\n              lang,\n            }}\n            title={title}\n            titleTemplate={`%s | ${data.site.siteMetadata.title}`}\n            meta={[\n              {\n                name: 'description',\n                content: metaDescription,\n              },\n              {\n                property: 'og:title',\n                content: title,\n              },\n              {\n                property: 'og:description',\n                content: metaDescription,\n              },\n              {\n                property: 'og:type',\n                content: 'website',\n              },\n              {\n                name: 'twitter:card',\n                content: 'summary',\n              },\n              {\n                name: 'twitter:creator',\n                content: data.site.siteMetadata.author,\n              },\n              {\n                name: 'twitter:title',\n                content: title,\n              },\n              {\n                name: 'twitter:description',\n                content: metaDescription,\n              },\n            ]\n              .concat(\n                keywords.length > 0\n                  ? {\n                      name: 'keywords',\n                      content: keywords.join(', '),\n                    }\n                  : []\n              )\n              .concat(meta)}\n          />\n        )\n      }}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: 'en',\n  meta: [],\n  keywords: [],\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.array,\n  keywords: PropTypes.arrayOf(PropTypes.string),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n\nconst detailsQuery = graphql`\n  query DefaultSEOQuery {\n    site {\n      siteMetadata {\n        title\n        description\n        author\n      }\n    }\n  }\n`\n","import { Link, graphql } from 'gatsby'\nimport { Location } from '@reach/router';\nimport PropTypes from 'prop-types'\nimport React from 'react'\n\nconst menuLinks = [\n      {\n        name: 'Request',\n        link: '/transactionrequest/'\n      },\n      {\n        name: 'Response',\n        link: '/transactionresponse/'\n      },\n      {\n        name: 'Interaction',\n        link: '/interaction/'\n      },\n      {\n        name: 'Keys',\n        link: '/keys/'\n      },\n      {\n        name: 'Tokens',\n        link: '/tokens/'\n      },\n      {\n        name: 'Examples',\n        link: '/examples/'\n      },\n      {\n        name: 'About',\n        link: '/about/'\n      },\n]\n\nconst Header = ({ siteTitle, currentPage }) => (\n  <div className=\"header\">\n    <div className=\"wrapper\">\n      <h1 style={{ margin: 0 }}>\n        <Link\n          to=\"/\"\n          style={{\n            color: 'white',\n            textDecoration: 'none',\n          }}\n        >\n          {siteTitle}\n        </Link>\n      </h1>\n          <nav>\n            {\n              menuLinks.map(link =>\n                  <Link to={link.link}>{link.name}</Link>\n              )\n            }\n          </nav>\n    </div>\n    <div class=\"subnav\">\n            \n    </div>\n  </div>\n)\n\nHeader.propTypes = {\n  siteTitle: PropTypes.string,\n}\n\nHeader.defaultProps = {\n  siteTitle: '',\n}\n\nexport default Header\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { StaticQuery, graphql } from 'gatsby'\n\nimport Header from './header'\nimport 'bootstrap/dist/css/bootstrap.css'\nimport './layout.css'\n\nconst Layout = ({ children }) => (\n  <StaticQuery\n    query={graphql`\n      query SiteTitleQuery {\n        site {\n          siteMetadata {\n            title\n          }\n        }\n      }\n    `}\n    render={data => (\n      <>\n        <Header siteTitle={data.site.siteMetadata.title} />\n        <div\n          style={{\n            margin: '0 auto',\n            maxWidth: 960,\n            padding: '0px 1.0875rem 1.45rem',\n            paddingTop: 0,\n          }}\n        >\n          {children}\n        </div>\n      </>\n    )}\n  />\n)\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\nimport loader from \"./loader\"\n\nconst ProdPageRenderer = ({ location }) => {\n  const pageResources = loader.getResourcesForPathnameSync(location.pathname)\n  if (!pageResources) {\n    return null\n  }\n\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","import React from 'react'\n\nimport Badge from 'react-bootstrap/Badge'\nimport Alert from 'react-bootstrap/Alert'\n\nconst Client = () => {\n  return (\n    <Badge pill variant=\"info\">Client</Badge>\n  );\n};\n\nconst Browser = () => {\n  return (\n    <Badge pill variant=\"secondary\">Browser</Badge>\n  );\n};\n\nconst AS = () => {\n  return (\n    <Badge pill variant=\"warning\">AS</Badge>\n  );\n};\n\nconst RS = () => {\n  return (\n    <Badge pill variant=\"dark\">RS</Badge>\n  );\n}\n\nconst toBadge = (from) => {\n  if (from == 'client') {\n    return (<Client />);\n  } else if (from == 'browser') {\n    return (<Browser />);\n  } else if (from == 'as') {\n    return (<AS />);\n  } else if (from == 'rs') {\n    return (<RS />);\n  } else {\n    return (<Badge pill variant=\"danger\">?</Badge>);\n  }\n};\n\nconst Network = ({from, to}) => {\n  const elements = [\n    toBadge(from),\n    '➡',\n    toBadge(to)\n  ];\n  \n  return (\n  \n    <Alert variant=\"dark\" className=\"alert-network\">\n      {elements}\n    </Alert>\n  );\n  \n}\n\nexport default Network;","import React from 'react'\n\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport { okaidia } from 'react-syntax-highlighter/dist/esm/styles/prism';\n\nimport Network from '../components/network';\n\nconst Code = ({code, codeString, from, to, language}) => {\n\n  if (!language) {\n    language = 'javascript';\n  }\n\n  if (!codeString) {\n    codeString = JSON.stringify(code, null, 4);\n  }\n  \n  if (from || to) {\n    return ([\n      <>\n      <Network from={from} to={to} />\n      <SyntaxHighlighter language={language} style={okaidia} customStyle={{marginTop: 0, borderRadius: \"0 0 0.3rem 0.3rem\"}}>{codeString}</SyntaxHighlighter>\n      </>\n    ]);\n  } else {\n    return (\n      <SyntaxHighlighter language={language} style={okaidia}>{codeString}</SyntaxHighlighter>\n    );\n  }\n  \n};\n\n\nexport default Code;"],"sourceRoot":""}